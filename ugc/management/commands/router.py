import asyncio
import os

import django
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import (
    Message,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    CallbackQuery,
    KeyboardButton,
    ReplyKeyboardMarkup, ReplyKeyboardRemove,
)
from django.core.exceptions import ObjectDoesNotExist

from ugc.models import TelegramUser

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "rest.settings")
os.environ["DJANGO_ALLOW_ASYNC_UNSAFE"] = "true"
django.setup()

router = Router()


async def edit_message_text(message, text):
    await message.edit_text(text)


async def change_language(language, callback_query=None):
    user_id = callback_query.from_user.id if callback_query else None
    username = callback_query.from_user.username if callback_query else None

    user, created = await get_or_create_user(user_id, username, language)

    first_name = callback_query.from_user.first_name
    confirmation_message = {
        "rus": f"–Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ üá∑üá∫ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {first_name}.",
        "kaz": f"–¢—ñ–ª üá∞üáø “õ–∞–∑–∞“õ —Ç—ñ–ª—ñ–Ω–µ ”©–∑–≥–µ—Ä–¥—ñ, –ø–∞–π–¥–∞–ª–∞–Ω—É—à—ã {first_name} “Ø—à—ñ–Ω.",
    }[language] if created else {
        "rus": f"–†—É—Å—Å–∫–∏–π —è–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {first_name}.",
        "kaz": f"“ö–∞–∑–∞“õ —Ç—ñ–ª—ñ –ø–∞–π–¥–∞–ª–∞–Ω—É—à—ã {first_name} “Ø—à—ñ–Ω –æ—Ä–Ω–∞—Ç—ã–ª–¥—ã.",
    }[language]

    await edit_message_text(callback_query.message, confirmation_message)
    if user.tg_user_lang == "rus":
        location_km_text = "–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏—Å–∫–∞—Ç—å –∂–∏–ª—å–µ (–æ—Ç 5 –¥–æ 80)"
        expires_time = "–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É."
        isdigit_exception = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ."
        skip_text = "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
        distance_text_error = "–ß—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ, –≤–≤–µ–¥–∏—Ç–µ /distance"
    else:
        location_km_text = "–ï–Ω–¥—ñ –∂–∞–∑—ã“£—ã–∑, “õ–∞–Ω–∞“ì–∞—Ç—Ç–∞–Ω—É —ñ–∑–¥–µ—É—ñ“£—ñ–∑–¥—ñ“£ “õ–∞—à—ã“õ—Ç—ã“ì—ã–Ω –∫”©—Ä—Å–µ—Ç—ñ“£—ñ–∑ (5-—Ç–µ–Ω 80-–≥–µ –¥–µ–π—ñ–Ω)"
        expires_time = "–ö“Ø—Ç—É —É–∞“õ—ã—Ç—ã –∞—è“õ—Ç–∞–ª–¥—ã. –ü”ô—Ä–º–µ–Ω–¥—ñ “õ–∞–π—Ç–∞–ª–∞“£—ã–∑."
        isdigit_exception = "–ë“Ø—Ç—ñ–Ω —Å–∞–Ω–¥—ã –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑."
        skip_text = "”®—Ç–∫—ñ–∑—ñ–ø –∂—ñ–±–µ—Ä—É"
        distance_text_error = "“ö–∞—à—ã“õ—Ç—ã“õ—Ç—ã –æ—Ä–Ω–∞—Ç—É “Ø—à—ñ–Ω /“õ–∞—à—ã“õ—Ç—ã“õ—Ç—ã –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑"
    try:
        response = await callback_query.message.answer(location_km_text)
        await response.message.answer(skip_text, reply_markup=ReplyKeyboardRemove())
        response = await callback_query.message.await_message(timeout=10)
        if response.text.lower() == skip_text.lower():
            pass
        elif response.text.isdigit():
            get_km = int(response.text)
            if 5 <= get_km <= 80:
                user.location_km = get_km
            else:
                await callback_query.message.answer(distance_text_error)
        else:
            await callback_query.message.answer(isdigit_exception)
            await callback_query.message.answer(distance_text_error)
    except asyncio.TimeoutError:
        await callback_query.message.answer(expires_time)


async def get_or_create_user(user_id, username, language):
    return TelegramUser.objects.get_or_create(
        tg_user_id=user_id,
        defaults={"tg_username": username, "tg_user_lang": language},
    )


async def get_user_by_id(user_id):
    try:
        return TelegramUser.objects.get(tg_user_id=user_id)
    except ObjectDoesNotExist:
        return None


keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–†—É—Å—Å–∫–∏–π üá∑üá∫", callback_data='Ru'),
     InlineKeyboardButton(text="“ö–∞–∑–∞“õ üá∞üáø", callback_data='Kz')]
])


@router.message(Command("start"))
async def start_handler(msg: Message):
    user = await get_user_by_id(msg.from_user.id)
    if not user:
        await msg.answer(
            "“ö–æ—à –∫–µ–ª–¥—ñ“£—ñ–∑! –¢—ñ–ª–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑ / –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫",
            reply_markup=keyboard,
        )
    else:
        await msg.answer("“ö–∞–π—Ç–∞ “õ–æ—à –∫–µ–ª–¥—ñ“£—ñ–∑! / –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")


@router.callback_query(lambda c: c.data in ('Ru', 'Kz'))
async def process_callback(callback_query: CallbackQuery):
    language = 'rus' if callback_query.data == 'Ru' else 'kaz'
    await change_language(language, callback_query)


@router.message(Command("language"))
async def language_handler(msg: Message):
    await msg.answer("–¢—ñ–ª–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑ / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:", reply_markup=keyboard)
